
apply plugin: 'application'
apply plugin: 'java'
//apply plugin: 'edu.sc.seis.macAppBundle'
apply plugin: 'com.github.johnrengelman.shadow'


sourceCompatibility = 1.8
targetCompatibility = 1.8

//macAppBundle {
//    mainClassName = "ch.fork.AdHocRailway.ui.AdHocRailway"
//    icon = "src/main/resources/custom/2-Hot-Train-icon.icns"
//    javaProperties.put("apple.laf.useScreenMenuBar", "true")
//    javaProperties.put("com.apple.mrj.application.apple.menu.about.name", "AdHoc-Railway")
//    appName = "AdHoc-Railway"
//    dmgName = "AdHoc-Railway-" + project.version
//
//}
archivesBaseName = 'adhocrailway-gui'
mainClassName = "ch.fork.adhocrailway.ui.AdHocRailway"
shadowJar {
    archiveBaseName.set('adhocrailway-gui')
    archiveClassifier.set('')
    archiveVersion.set('')
}
dependencies {
    implementation 'jgoodies:forms:1.0.5'
    implementation 'com.jgoodies:jgoodies-common:1.4.0'
    implementation 'com.jgoodies:looks:2.2.2'
    implementation 'com.jgoodies:binding:2.0.6'
    implementation 'com.miglayout:miglayout:3.7.4'
    implementation 'commons-beanutils:commons-beanutils:1.8.3'
    implementation 'javax.jmdns:jmdns:3.4.1'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    implementation 'commons-cli:commons-cli:1.2'
    implementation 'commons-codec:commons-codec:1.9'
    implementation 'commons-io:commons-io:2.4'

    implementation project(':ch.fork.adhocrailway.persistence.xml')
    implementation project(':ch.fork.adhocrailway.persistence.adhocserver')
    implementation project(':ch.fork.adhocrailway.railway.srcp')
    implementation project(':ch.fork.adhocrailway.railway.brain')
}

jar {
    manifest {
        attributes 'Main-Class': 'ch.fork.adhocrailway.ui.AdHocRailway','Implementation-Title': 'AdHoc-Railway-GUI', 'Implementation-Version': version, 'Permissions': 'all-permissions'
    }

}

startScripts {

}

task createSamples {
    def samples = file("$buildDir/samples")
    outputs.dir samples
    doLast {
        samples.mkdirs()
        copy {
            from 'samples'
            into samples

        }
    }
}
task createLocoimages {
    def locoimages = file("$buildDir/locoimages")
    outputs.dir locoimages
    doLast {
        locoimages.mkdirs()
        copy {
            from 'locoimages'
            into locoimages

        }
    }
}

applicationDistribution.from(createSamples) {
    into "samples"
}
applicationDistribution.from(createLocoimages) {
    into "locoimages"
}

//
//task copyFiles(type: Copy, dependsOn: [jar]) {
//    from configurations.runtime
//    from("${buildDir}/libs")
//    into("${buildDir}/webstart/lib")
//    include('*.jar')
//}
//
//task signAll(dependsOn: [copyFiles]) {
//    doLast {
//        new File("${buildDir}/webstart/signed").mkdirs()
//        def libFiles = files { file("${buildDir}/webstart/lib").listFiles() }
//        libFiles.each {
//            ant.signjar(
//                    destDir: "${buildDir}/webstart/signed",
//                    alias: 'http://www.fork.ch',
//                    jar: it,
//                    keystore: "${projectDir}/src/jnlp/keys/forkch.keys",
//                    storepass: 'forkch123',
//                    preservelastmodified: 'true')
//        }
//    }
//}

//task generateJnlp(dependsOn: [signAll]) {
//    doLast {
//        File jnlpTemplateFile = new File("${projectDir}/src/jnlp/template/template.vm")
//        def root = new XmlParser().parse(jnlpTemplateFile)
//        def jnlpFileName = "${archivesBaseName}-${version}.jnlp"
//        def jnlpFileNameLatest = "${archivesBaseName}-latest.jnlp"
//        // Setting values in the jnlp template
//        // Setting root values
//        root.@codebase = 'http://adhocserver/adhoc-railway/artifacts'
//        root.@href = jnlpFileName
//        // Setting information values
//        def information = root.information[0]
//        def title = information.title[0]
//        def vendor = information.vendor[0]
//        title.setValue("AdHoc-Railway-GUI")
//        vendor.setValue("www.fork.ch")
//        def descriptionList = information.description
//        descriptionList.each {
//            it.setValue("Simple example of generating webstart files using gradle")
//        }
//        // Setting resources
//        def resource = root.resources[0]
//        def j2se = resource.j2se[0]
//        j2se.@version = "1.7+"
//        def collection = files { file("${buildDir}/webstart/lib").listFiles() }
//        def mainJar = "${archivesBaseName}-${version}.jar"
//        collection.each {
//            def resourceValues = [href: it.name]
//            if (mainJar == it.name) {
//                resourceValues = [href: it.name, main: 'true']
//            }
//            resource.appendNode('jar', resourceValues)
//        }
//        // Setting the main class
//        def applicationDesc = root.'application-desc'[0]
//        applicationDesc.'@main-class' = "ch.fork.AdHocRailway.ui.AdHocRailway"
//        // Writing the jnlp file filled
//        File jnlpFile = new File("${buildDir}/webstart/signed/" + jnlpFileName)
//        File jnlpFileLatest = new File("${buildDir}/webstart/signed/" + jnlpFileNameLatest)
//        new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
//        new XmlNodePrinter(new PrintWriter(jnlpFileLatest)).print(root)
//    }
//}
//
//task generateJnlpLocal(dependsOn: [signAll]) {
//    doLast {
//        File jnlpTemplateFile = new File("${projectDir}/src/jnlp/template/template.vm")
//        def root = new XmlParser().parse(jnlpTemplateFile)
//        def jnlpFileName = "${archivesBaseName}-${version}.jnlp"
//        def jnlpFileNameLatest = "${archivesBaseName}-latest.jnlp"
//        // Setting values in the jnlp template
//        // Setting root values
//        // File CodeBase
//        //root.@codebase = 'file:/'+new File('webstart/signed').absolutePath
//        root.@codebase = '.'
//        // Hppt CodeBase
//        //root.@codebase = 'http://adhocserver/adhoc-railway/artifacts'
//        root.@href = jnlpFileName
//        // Setting information values
//        def information = root.information[0]
//        def title = information.title[0]
//        def vendor = information.vendor[0]
//        title.setValue("AdHoc-Railway-GUI")
//        vendor.setValue("www.fork.ch")
//        def descriptionList = information.description
//        descriptionList.each {
//            it.setValue("Simple example of generating webstart files using gradle")
//        }
//        // Setting resources
//        def resource = root.resources[0]
//        def j2se = resource.j2se[0]
//        j2se.@version = "1.7+"
//        def collection = files { file("${buildDir}/webstart/lib").listFiles() }
//        def mainJar = "${archivesBaseName}-${version}.jar"
//        collection.each {
//            def resourceValues = [href: it.name]
//            if (mainJar == it.name) {
//                resourceValues = [href: it.name, main: 'true']
//            }
//            resource.appendNode('jar', resourceValues)
//        }
//        // Setting the main class
//        def applicationDesc = root.'application-desc'[0]
//        applicationDesc.'@main-class' = "ch.fork.AdHocRailway.ui.AdHocRailway"
//        // Writing the jnlp file filled
//        File jnlpFile = new File("${buildDir}/webstart/signed/" + jnlpFileName)
//        File jnlpFileLatest = new File("${buildDir}/webstart/signed/" + jnlpFileNameLatest)
//        new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
//        new XmlNodePrinter(new PrintWriter(jnlpFileLatest)).print(root)
//    }
//}
//
//
//task generateWebStartFiles(dependsOn: [generateJnlp]) {
//    doLast {
//        println("Generating all webstart files in:webstart/signed")
//    }
//}
//
//task generateWebStartFilesLocal(dependsOn: [generateJnlpLocal]) {
//    doLast {
//        println("Generating all webstart files in:webstart/signed")
//    }
//}
